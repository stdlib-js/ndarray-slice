{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isndarrayLike from '@stdlib/assert-is-ndarray-like';\nimport isMultiSlice from '@stdlib/assert-is-multi-slice';\nimport isArrayLikeObject from '@stdlib/assert-is-array-like-object';\nimport isPlainObject from '@stdlib/assert-is-plain-object';\nimport { isPrimitive as isBoolean } from '@stdlib/assert-is-boolean';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport MultiSlice from '@stdlib/slice-multi';\nimport base from '@stdlib/ndarray-base-slice';\nimport getShape from '@stdlib/ndarray-shape';\nimport format from '@stdlib/string-format';\n\n\n// MAIN //\n\n/**\n* Returns a read-only view of an input ndarray.\n*\n* @param {ndarray} x - input array\n* @param {...*} s - slice arguments\n* @param {Options} [options] - options\n* @param {boolean} [options.strict] - boolean indicating whether to enforce strict bounds checking\n* @throws {TypeError} first argument must be an ndarray\n* @throws {TypeError} must provide valid slice arguments\n* @throws {Error} insufficient arguments\n* @throws {Error} too many arguments\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {RangeError} number of slice dimensions must match the number of array dimensions\n* @throws {RangeError} slice exceeds array bounds\n* @returns {ndarray} ndarray view\n*\n* @example\n* import Slice from '@stdlib/slice-ctor';\n* import MultiSlice from '@stdlib/slice-multi';\n* import ndarray from '@stdlib/ndarray-ctor';\n* import ndarray2array from '@stdlib/ndarray-to-array';\n*\n* var buffer = [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ];\n* var shape = [ 3, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n*\n* var x = ndarray( 'generic', buffer, shape, strides, offset, 'row-major' );\n* // returns <ndarray>\n*\n* var sh = x.shape;\n* // returns [ 3, 2 ]\n*\n* var arr = ndarray2array( x );\n* // returns [ [ 1.0, 2.0 ], [ 3.0, 4.0 ], [ 5.0, 6.0 ] ]\n*\n* var s = new MultiSlice( new Slice( null, null, -2 ), new Slice( null, null, -1 ) );\n* // returns <MultiSlice>\n*\n* var y = slice( x, s );\n* // returns <ndarray>\n*\n* sh = y.shape;\n* // returns [ 2, 2 ]\n*\n* arr = ndarray2array( y );\n* // returns [ [ 6.0, 5.0 ], [ 2.0, 1.0 ] ]\n*/\nfunction slice( x, s ) {\n\tvar options;\n\tvar nargs;\n\tvar opts;\n\tvar args;\n\tvar sh;\n\tvar S;\n\tvar i;\n\n\topts = {\n\t\t'strict': true\n\t};\n\tnargs = arguments.length;\n\tif ( !isndarrayLike( x ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an ndarray. Value: `%s`.', x ) );\n\t}\n\tif ( isPlainObject( arguments[ nargs-1 ] ) ) {\n\t\tnargs -= 1;\n\t\toptions = arguments[ nargs ];\n\t\tif ( hasOwnProp( options, 'strict' ) ) {\n\t\t\tif ( !isBoolean( options.strict ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'strict', options.strict ) );\n\t\t\t}\n\t\t\topts.strict = options.strict;\n\t\t}\n\t\tsh = getShape( x );\n\t\tif ( nargs === 1 && sh.length > 0 ) {\n\t\t\tthrow new RangeError( format( 'invalid argument. Number of slice dimensions does not match the number of array dimensions. Array shape: (%s). Slice dimensions: %u.', sh.join( ',' ), 0 ) );\n\t\t}\n\t}\n\tif ( isMultiSlice( s ) ) {\n\t\tS = s;\n\t\tif ( nargs > 2 ) {\n\t\t\tthrow new Error( 'invalid invocation. Too many arguments.' );\n\t\t}\n\t} else {\n\t\tif ( isArrayLikeObject( s ) ) {\n\t\t\targs = s;\n\t\t\tif ( nargs > 2 ) {\n\t\t\t\tthrow new Error( 'invalid invocation. Too many arguments.' );\n\t\t\t}\n\t\t} else {\n\t\t\targs = [];\n\t\t\tfor ( i = 1; i < nargs; i++ ) {\n\t\t\t\targs.push( arguments[ i ] );\n\t\t\t}\n\t\t}\n\t\ttry {\n\t\t\tS = MultiSlice.apply( null, args );\n\t\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\t\t// Search for the first offending value...\n\t\t\tfor ( i = 0; i < args.length; i++ ) {\n\t\t\t\ttry {\n\t\t\t\t\tnew MultiSlice( args[ i ] ); // eslint-disable-line no-new\n\t\t\t\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\t\t\t\tthrow new TypeError( format( 'invalid argument. Slice arguments must be either a Slice, integer, null, or undefined. Value: `%s`.', String( args[ i ] ) ) );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn base( x, S, opts.strict, false );\n}\n\n\n// EXPORTS //\n\nexport default slice;\n"],"names":["slice","x","s","options","nargs","opts","args","sh","S","i","strict","arguments","length","isndarrayLike","TypeError","format","isPlainObject","hasOwnProp","isBoolean","getShape","RangeError","join","isMultiSlice","Error","isArrayLikeObject","push","MultiSlice","apply","err","String","base"],"mappings":";;w7BAqFA,SAASA,EAAOC,EAAGC,GAClB,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAMJ,GAJAJ,EAAO,CACNK,QAAU,GAEXN,EAAQO,UAAUC,QACZC,EAAeZ,GACpB,MAAM,IAAIa,UAAWC,EAAQ,oEAAqEd,IAEnG,GAAKe,EAAeL,UAAWP,EAAM,IAAQ,CAG5C,GAAKa,EADLd,EAAUQ,UADVP,GAAS,GAEiB,UAAa,CACtC,IAAMc,EAAWf,EAAQO,QACxB,MAAM,IAAII,UAAWC,EAAQ,+DAAgE,SAAUZ,EAAQO,SAEhHL,EAAKK,OAASP,EAAQO,MACtB,CAED,GADAH,EAAKY,EAAUlB,GACA,IAAVG,GAAeG,EAAGK,OAAS,EAC/B,MAAM,IAAIQ,WAAYL,EAAQ,uIAAwIR,EAAGc,KAAM,KAAO,GAEvL,CACD,GAAKC,EAAcpB,IAElB,GADAM,EAAIN,EACCE,EAAQ,EACZ,MAAM,IAAImB,MAAO,+CAEZ,CACN,GAAKC,EAAmBtB,IAEvB,GADAI,EAAOJ,EACFE,EAAQ,EACZ,MAAM,IAAImB,MAAO,gDAIlB,IADAjB,EAAO,GACDG,EAAI,EAAGA,EAAIL,EAAOK,IACvBH,EAAKmB,KAAMd,UAAWF,IAGxB,IACCD,EAAIkB,EAAWC,MAAO,KAAMrB,EAU5B,CATC,MAAQsB,GAET,IAAMnB,EAAI,EAAGA,EAAIH,EAAKM,OAAQH,IAC7B,IACC,IAAIiB,EAAYpB,EAAMG,GAGtB,CAFC,MAAQmB,GACT,MAAM,IAAId,UAAWC,EAAQ,sGAAuGc,OAAQvB,EAAMG,KAClJ,CAEF,CACD,CACD,OAAOqB,EAAM7B,EAAGO,EAAGH,EAAKK,QAAQ,EACjC"}